pragma solidity ^0.4.10;

contract LeanFund {

  // Poloniex Exchange Rate 2017-07-30: 193.7 USD / ETH

  address public beneficiary;

  // These are for Ethereum backers only
  mapping (address => uint) public contributionsETH;
  mapping (address => uint) public payoutsETH;

  uint public fundingGoal;     // in wei, the amount we're aiming for
  uint public payoutETH;       // in wei, the amount withdrawn as fee
  uint public amountRaised;    // in wei, the total amount raised

  address public owner;
  uint    public fee; // the contract fee is 1.5k USD, or ~7.74 ETH
  uint    public feeWithdrawn; // in wei

  uint public creationTime;
  uint public deadlineBlockNumber;
  bool public open;            // has the funding period started, and contract initialized

  function LeanFund() {
    owner = msg.sender;
    creationTime = now;
    open = false;
  }

  // We can only initialize once, but don't add beforeDeadline guard or check deadline
  function initialize(uint _fundingGoalInWei, address _beneficiary, uint _deadlineBlockNumber) {
    if (open || msg.sender != owner) throw; // we can only initialize once
    beneficiary = _beneficiary;
    payoutETH = 0;
    amountRaised = 0;
    fee = 0;
    feeWithdrawn = 0;
    fundingGoal = _fundingGoalInWei;

    // If we pass in a deadline in the past, set it to be 10 minutes from now.
    deadlineBlockNumber = _deadlineBlockNumber;
    open = true;
  }

  // Normal pay-in function, where msg.sender is the contributor
  function() payable {
    if (payoutsETH[msg.sender] == 0) { // defend against re-entrancy
        contributionsETH[msg.sender] += msg.value; // allow multiple contributions
        amountRaised += msg.value;
    }
  }

  function getContribution() constant returns (uint retVal) {
    return contributionsETH[msg.sender];
  }

}
